syntax = "v1"

info (
	title:       "notevault API"
	desc:        "notevault file and metadata management API"
	author:      "yeisme"
	email:       "yefun2004@gmail.com"
	version:     "v1"
	host:        "localhost"
	description: "notevault API documentation"
	licenseName: "MIT"
)

type (
	// FileMetadata defines the structure of file metadata
	FileMetadata {
		FileID      string   `json:"fileId"` // Unique file ID
		UserID      string   `json:"userId"` // ID of the user who owns the file
		FileName    string   `json:"fileName"` // File name
		FileType    string   `json:"fileType"` // File type, e.g., "document", "image", "video", "text"
		ContentType string   `json:"contentType"` // MIME type, e.g., "application/pdf", "image/jpeg", "text/plain"
		Size        int64    `json:"size"` // File size in bytes
		Path        string   `json:"path"` // Storage path or key
		CreatedAt   int64    `json:"createdAt"` // Creation time (Unix timestamp)
		UpdatedAt   int64    `json:"updatedAt"` // Update time (Unix timestamp)
		Version     int      `json:"version"` // Current file version number
		Tags        []string `json:"tags,optional"` // Tags
		Description string   `json:"description,optional"` // Description
	}
	// FileUploadRequest defines the request for uploading a file
	// Implementation of file chunking and resumable uploads is typically handled at the client and server transport layer, while at the API level it still appears as a file upload
	FileUploadRequest {
		FileName      string `form:"fileName,optional"` // Optional: If not provided, the name of the uploaded file will be used
		FileType      string `form:"fileType,optional"` // Optional: Can be inferred or specified
		Description   string `form:"description,optional"` // Description
		Tags          string `form:"tags,optional"` // Comma-separated tags
		CommitMessage string `form:"commitMessage,optional"` // Version commit message
	}
	// FileUploadResponse defines the response after a successful file upload
	FileUploadResponse {
		FileID      string `json:"fileId"`
		FileName    string `json:"fileName"`
		ContentType string `json:"contentType"`
		Size        int64  `json:"size"`
		Message     string `json:"message"`
		Version     int    `json:"version"` // File version number after upload
	}
	// FileDownloadRequest defines the request for downloading a file
	FileDownloadRequest {
		FileID        string `path:"fileId"`
		VersionNumber *int   `form:"versionNumber,optional"` // Optional, specify to download a specific version of the file
	}
	// Note: FileDownloadResponse will be the actual file stream, not JSON.
	// FilePreviewRequest defines the request for previewing a file
	FilePreviewRequest {
		FileID        string `path:"fileId"`
		VersionNumber *int   `form:"versionNumber,optional"` // Optional, specify to preview a specific version of the file
	}
	// Note: FilePreviewResponse will be the actual file stream or a specific preview format (such as HTML), not JSON.
	// FileDeleteRequest defines the request for deleting a file
	FileDeleteRequest {
		FileID        string `path:"fileId"`
		VersionNumber *int   `json:"versionNumber,optional"` // Optional, specify to delete a specific version of the file
	}
	// FileDeleteResponse defines the response after deleting a file
	FileDeleteResponse {
		Message string `json:"message"`
	}
	// BatchDeleteFilesRequest defines the request for batch deleting files
	BatchDeleteFilesRequest {
		FileIDs       []string `json:"fileIds"`
		VersionNumber *int     `json:"versionNumber,optional"` // Optional, specify to delete a specific version of the files
	}
	// BatchDeleteFilesResponse defines the response after batch deleting files
	BatchDeleteFilesResponse {
		Succeeded []string `json:"succeeded"` // List of file IDs that were successfully deleted
		Failed    []string `json:"failed"` // List of file IDs that failed to delete (and reasons, optional)
		Message   string   `json:"message"`
	}
	// GetFileMetadataRequest defines the request for retrieving file metadata
	GetFileMetadataRequest {
		FileID        string `path:"fileId"`
		VersionNumber *int   `form:"versionNumber,optional"` // Optional, get metadata for a specific version of the file
	}
	// GetFileMetadataResponse defines the response containing file metadata
	GetFileMetadataResponse {
		Metadata FileMetadata `json:"metadata"`
	}
	// UpdateFileMetadataRequest defines the request for updating file metadata
	// Updating metadata typically creates a new version
	UpdateFileMetadataRequest {
		FileID        string   `path:"fileId"`
		FileName      string   `json:"fileName,optional"`
		Description   string   `json:"description,optional"`
		Tags          []string `json:"tags,optional"`
		CommitMessage string   `json:"commitMessage,optional"` // Version commit message
	}
	// UpdateFileMetadataResponse defines the response after updating file metadata
	UpdateFileMetadataResponse {
		Metadata FileMetadata `json:"metadata"` // Updated metadata, including the new version number
		Message  string       `json:"message"`
	}
	// ListFilesRequest defines the request for listing files with pagination and filtering
	ListFilesRequest {
		UserID         string `form:"userId,optional"` // Filter by user ID (may be used by administrators)
		FileName       string `form:"fileName,optional"` // Fuzzy match by file name
		FileType       string `form:"fileType,optional"` // Exact match by file type
		Tag            string `form:"tag,optional"` // Exact match by a single tag (multiple tags may be supported in the future)
		CreatedAtStart int64  `form:"createdAtStart,optional"` // Creation time range start (Unix timestamp)
		CreatedAtEnd   int64  `form:"createdAtEnd,optional"` // Creation time range end (Unix timestamp)
		UpdatedAtStart int64  `form:"updatedAtStart,optional"` // Update time range start (Unix timestamp)
		UpdatedAtEnd   int64  `form:"updatedAtEnd,optional"` // Update time range end (Unix timestamp)
		Page           int    `form:"page,default=1"` // Page number
		PageSize       int    `form:"pageSize,default=10"` // Page size
		SortBy         string `form:"sortBy,optional,options=name|date|size|type"` // Sort field: name, date (updatedAt), size, type
		Order          string `form:"order,optional,options=asc|desc"` // Sort order
	}
	// ListFilesResponse defines the response for file listing
	ListFilesResponse {
		Files      []FileMetadata `json:"files"`
		TotalCount int64          `json:"totalCount"`
		Page       int            `json:"page"`
		PageSize   int            `json:"pageSize"`
	}
	// GetFileVersionsRequest defines the request for getting file version history
	GetFileVersionsRequest {
		FileID string `path:"fileId"`
	}
	// FileVersionInfo defines information about a specific file version
	FileVersionInfo {
		Version       int    `json:"version"` // Version number
		Size          int64  `json:"size"` // File size
		CreatedAt     int64  `json:"createdAt"` // Version creation time
		ContentType   string `json:"contentType"` // MIME type of this version of the file
		CommitMessage string `json:"commitMessage,optional"` // Commit message for this version
	}
	// GetFileVersionsResponse defines the response for file version history
	GetFileVersionsResponse {
		FileID   string            `json:"fileId"`
		Versions []FileVersionInfo `json:"versions"`
	}
	// RevertFileVersionRequest defines the request for reverting a file to a specific version
	RevertFileVersionRequest {
		FileID        string `path:"fileId"`
		Version       int    `json:"version"` // Version number to revert to
		CommitMessage string `json:"commitMessage,optional"` // Commit message for the revert operation
	}
	// RevertFileVersionResponse defines the response after reverting a file version
	RevertFileVersionResponse {
		Metadata FileMetadata `json:"metadata"` // Current file metadata after reverting (version is updated)
		Message  string       `json:"message"`
	}
	// FileVersionDiffRequest defines the request for getting version differences
	FileVersionDiffRequest {
		FileID        string `path:"fileId"`
		BaseVersion   int    `form:"baseVersion"` // Base version number
		TargetVersion int    `form:"targetVersion"` // Target version number
	}
	// FileVersionDiffResponse defines the response for version differences
	// The specific format of the differences depends on the file type, here a string represents generic text differences
	FileVersionDiffResponse {
		FileID        string `json:"fileId"`
		BaseVersion   int    `json:"baseVersion"`
		TargetVersion int    `json:"targetVersion"`
		DiffContent   string `json:"diffContent"` // Difference content (e.g., unified diff format)
		Message       string `json:"message,optional"`
	}
)

@server (
	// jwt:    Auth // Indicates that routes in this service block require JWT authentication
	group:  file // Group routes under the 'file' prefix
	prefix: /api/v1/files // Base path for these APIs
)
service NoteVaultService {
	@doc "Upload a new file. The actual file is sent as multipart/form-data."
	@handler uploadFile
	post /upload (FileUploadRequest) returns (FileUploadResponse)

	@doc "Download a file by file ID. Optionally download a specific version."
	@handler downloadFile
	get /download/:fileId (FileDownloadRequest) // Response is a file stream

	@doc "Delete a file by file ID. Optionally delete a specific version."
	@handler deleteFile
	delete /:fileId (FileDeleteRequest) returns (FileDeleteResponse)

	@doc "Batch delete files."
	@handler batchDeleteFiles
	post /batch/delete (BatchDeleteFilesRequest) returns (BatchDeleteFilesResponse)

	@doc "Get metadata for a specific file. Optionally get metadata for a specific version."
	@handler getFileMetadata
	get /metadata/:fileId (GetFileMetadataRequest) returns (GetFileMetadataResponse)

	@doc "Update metadata for a specific file. This typically creates a new version."
	@handler updateFileMetadata
	put /metadata/:fileId (UpdateFileMetadataRequest) returns (UpdateFileMetadataResponse)

	@doc "List files with support for pagination, filtering, and sorting."
	@handler listFiles
	get / (ListFilesRequest) returns (ListFilesResponse)

	@doc "Get version history for a file."
	@handler getFileVersions
	get /:fileId/versions (GetFileVersionsRequest) returns (GetFileVersionsResponse)

	@doc "Revert a file to a specific version."
	@handler revertFileVersion
	post /:fileId/versions/revert (RevertFileVersionRequest) returns (RevertFileVersionResponse)

	@doc "(Advanced) Get differences between two versions of a file (mainly for text files)."
	@handler getFileVersionDiff
	get /:fileId/versions/diff (FileVersionDiffRequest) returns (FileVersionDiffResponse)
}

// If you plan to use JWT middleware, you need to define the Auth struct, even if it's temporarily empty.
// If you specify `jwt: Auth`, go-zero requires this.
type Auth {
	AccessKey string `header:"Authorization"` // JWT token is typically placed in the Authorization header
}


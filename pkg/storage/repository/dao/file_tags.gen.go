// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/yeisme/notevault/pkg/storage/repository/model"
)

func newFileTag(db *gorm.DB, opts ...gen.DOOption) fileTag {
	_fileTag := fileTag{}

	_fileTag.fileTagDo.UseDB(db, opts...)
	_fileTag.fileTagDo.UseModel(&model.FileTag{})

	tableName := _fileTag.fileTagDo.TableName()
	_fileTag.ALL = field.NewAsterisk(tableName)
	_fileTag.FileID = field.NewString(tableName, "file_id")
	_fileTag.TagID = field.NewString(tableName, "tag_id")

	_fileTag.fillFieldMap()

	return _fileTag
}

type fileTag struct {
	fileTagDo

	ALL    field.Asterisk
	FileID field.String
	TagID  field.String

	fieldMap map[string]field.Expr
}

func (f fileTag) Table(newTableName string) *fileTag {
	f.fileTagDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fileTag) As(alias string) *fileTag {
	f.fileTagDo.DO = *(f.fileTagDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fileTag) updateTableName(table string) *fileTag {
	f.ALL = field.NewAsterisk(table)
	f.FileID = field.NewString(table, "file_id")
	f.TagID = field.NewString(table, "tag_id")

	f.fillFieldMap()

	return f
}

func (f *fileTag) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fileTag) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 2)
	f.fieldMap["file_id"] = f.FileID
	f.fieldMap["tag_id"] = f.TagID
}

func (f fileTag) clone(db *gorm.DB) fileTag {
	f.fileTagDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fileTag) replaceDB(db *gorm.DB) fileTag {
	f.fileTagDo.ReplaceDB(db)
	return f
}

type fileTagDo struct{ gen.DO }

type IFileTagDo interface {
	gen.SubQuery
	Debug() IFileTagDo
	WithContext(ctx context.Context) IFileTagDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFileTagDo
	WriteDB() IFileTagDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFileTagDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFileTagDo
	Not(conds ...gen.Condition) IFileTagDo
	Or(conds ...gen.Condition) IFileTagDo
	Select(conds ...field.Expr) IFileTagDo
	Where(conds ...gen.Condition) IFileTagDo
	Order(conds ...field.Expr) IFileTagDo
	Distinct(cols ...field.Expr) IFileTagDo
	Omit(cols ...field.Expr) IFileTagDo
	Join(table schema.Tabler, on ...field.Expr) IFileTagDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFileTagDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFileTagDo
	Group(cols ...field.Expr) IFileTagDo
	Having(conds ...gen.Condition) IFileTagDo
	Limit(limit int) IFileTagDo
	Offset(offset int) IFileTagDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFileTagDo
	Unscoped() IFileTagDo
	Create(values ...*model.FileTag) error
	CreateInBatches(values []*model.FileTag, batchSize int) error
	Save(values ...*model.FileTag) error
	First() (*model.FileTag, error)
	Take() (*model.FileTag, error)
	Last() (*model.FileTag, error)
	Find() ([]*model.FileTag, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FileTag, err error)
	FindInBatches(result *[]*model.FileTag, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FileTag) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFileTagDo
	Assign(attrs ...field.AssignExpr) IFileTagDo
	Joins(fields ...field.RelationField) IFileTagDo
	Preload(fields ...field.RelationField) IFileTagDo
	FirstOrInit() (*model.FileTag, error)
	FirstOrCreate() (*model.FileTag, error)
	FindByPage(offset int, limit int) (result []*model.FileTag, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFileTagDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fileTagDo) Debug() IFileTagDo {
	return f.withDO(f.DO.Debug())
}

func (f fileTagDo) WithContext(ctx context.Context) IFileTagDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fileTagDo) ReadDB() IFileTagDo {
	return f.Clauses(dbresolver.Read)
}

func (f fileTagDo) WriteDB() IFileTagDo {
	return f.Clauses(dbresolver.Write)
}

func (f fileTagDo) Session(config *gorm.Session) IFileTagDo {
	return f.withDO(f.DO.Session(config))
}

func (f fileTagDo) Clauses(conds ...clause.Expression) IFileTagDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fileTagDo) Returning(value interface{}, columns ...string) IFileTagDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fileTagDo) Not(conds ...gen.Condition) IFileTagDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fileTagDo) Or(conds ...gen.Condition) IFileTagDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fileTagDo) Select(conds ...field.Expr) IFileTagDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fileTagDo) Where(conds ...gen.Condition) IFileTagDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fileTagDo) Order(conds ...field.Expr) IFileTagDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fileTagDo) Distinct(cols ...field.Expr) IFileTagDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fileTagDo) Omit(cols ...field.Expr) IFileTagDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fileTagDo) Join(table schema.Tabler, on ...field.Expr) IFileTagDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fileTagDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFileTagDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fileTagDo) RightJoin(table schema.Tabler, on ...field.Expr) IFileTagDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fileTagDo) Group(cols ...field.Expr) IFileTagDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fileTagDo) Having(conds ...gen.Condition) IFileTagDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fileTagDo) Limit(limit int) IFileTagDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fileTagDo) Offset(offset int) IFileTagDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fileTagDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFileTagDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fileTagDo) Unscoped() IFileTagDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fileTagDo) Create(values ...*model.FileTag) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fileTagDo) CreateInBatches(values []*model.FileTag, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fileTagDo) Save(values ...*model.FileTag) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fileTagDo) First() (*model.FileTag, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FileTag), nil
	}
}

func (f fileTagDo) Take() (*model.FileTag, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FileTag), nil
	}
}

func (f fileTagDo) Last() (*model.FileTag, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FileTag), nil
	}
}

func (f fileTagDo) Find() ([]*model.FileTag, error) {
	result, err := f.DO.Find()
	return result.([]*model.FileTag), err
}

func (f fileTagDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FileTag, err error) {
	buf := make([]*model.FileTag, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fileTagDo) FindInBatches(result *[]*model.FileTag, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fileTagDo) Attrs(attrs ...field.AssignExpr) IFileTagDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fileTagDo) Assign(attrs ...field.AssignExpr) IFileTagDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fileTagDo) Joins(fields ...field.RelationField) IFileTagDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fileTagDo) Preload(fields ...field.RelationField) IFileTagDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fileTagDo) FirstOrInit() (*model.FileTag, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FileTag), nil
	}
}

func (f fileTagDo) FirstOrCreate() (*model.FileTag, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FileTag), nil
	}
}

func (f fileTagDo) FindByPage(offset int, limit int) (result []*model.FileTag, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fileTagDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fileTagDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fileTagDo) Delete(models ...*model.FileTag) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fileTagDo) withDO(do gen.Dao) *fileTagDo {
	f.DO = *do.(*gen.DO)
	return f
}

// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.3

package handler

import (
	"net/http"

	file "github.com/yeisme/notevault/internal/handler/file"
	"github.com/yeisme/notevault/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				// List files with support for pagination, filtering, and sorting.
				Method:  http.MethodGet,
				Path:    "/",
				Handler: file.ListFilesHandler(serverCtx),
			},
			{
				// Delete a file by file ID. Optionally delete a specific version.
				Method:  http.MethodDelete,
				Path:    "/:fileId",
				Handler: file.DeleteFileHandler(serverCtx),
			},
			{
				// Get version history for a file.
				Method:  http.MethodGet,
				Path:    "/:fileId/versions",
				Handler: file.GetFileVersionsHandler(serverCtx),
			},
			{
				// (Advanced) Get differences between two versions of a file (mainly for text files).
				Method:  http.MethodGet,
				Path:    "/:fileId/versions/diff",
				Handler: file.GetFileVersionDiffHandler(serverCtx),
			},
			{
				// Revert a file to a specific version.
				Method:  http.MethodPost,
				Path:    "/:fileId/versions/revert",
				Handler: file.RevertFileVersionHandler(serverCtx),
			},
			{
				// Batch delete files.
				Method:  http.MethodPost,
				Path:    "/batch/delete",
				Handler: file.BatchDeleteFilesHandler(serverCtx),
			},
			{
				// Download a file by file ID. Optionally download a specific version.
				Method:  http.MethodGet,
				Path:    "/download/:fileId",
				Handler: file.DownloadFileHandler(serverCtx),
			},
			{
				// Get metadata for a specific file. Optionally get metadata for a specific version.
				Method:  http.MethodGet,
				Path:    "/metadata/:fileId",
				Handler: file.GetFileMetadataHandler(serverCtx),
			},
			{
				// Update metadata for a specific file. This typically creates a new version.
				Method:  http.MethodPut,
				Path:    "/metadata/:fileId",
				Handler: file.UpdateFileMetadataHandler(serverCtx),
			},
			{
				// Upload a new file. The actual file is sent as multipart/form-data.
				Method:  http.MethodPost,
				Path:    "/upload",
				Handler: file.UploadFileHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1/files"),
	)
}

// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.3

package types

type Auth struct {
	AccessKey string `header:"Authorization"` // JWT token is typically placed in the Authorization header
}

type FileMetadata struct {
	FileID        string   `json:"fileId"`                 // Unique file ID
	UserID        string   `json:"userId"`                 // ID of the user who owns the file
	FileName      string   `json:"fileName"`               // File name
	FileType      string   `json:"fileType"`               // File type, e.g., "document", "image", "video", "text"
	ContentType   string   `json:"contentType"`            // MIME type, e.g., "application/pdf", "image/jpeg", "text/plain"
	Size          int64    `json:"size"`                   // File size in bytes
	Path          string   `json:"path"`                   // Storage path or key
	CreatedAt     int64    `json:"createdAt"`              // Creation time (Unix timestamp)
	UpdatedAt     int64    `json:"updatedAt"`              // Update time (Unix timestamp)
	Version       int      `json:"version"`                // Current file version number
	Status        int16    `json:"status"`                 // File status: 0=normal, 1=archived, 2=trashed, 3=pending deletion
	TrashedAt     int64    `json:"trashedAt,optional"`     // When the file was moved to trash (Unix timestamp)
	Tags          []string `json:"tags,optional"`          // Tags
	Description   string   `json:"description,optional"`   // Description
	CommitMessage string   `json:"commitMessage,optional"` // Version commit message
}

type FilePreviewRequest struct {
	FileID        string `path:"fileId"`
	VersionNumber *int   `form:"versionNumber,optional"` // Optional, specify to preview a specific version of the file
}

type FileVersionInfo struct {
	Version       int    `json:"version"`                // Version number
	Size          int64  `json:"size"`                   // File size
	CreatedAt     int64  `json:"createdAt"`              // Version creation time
	ContentType   string `json:"contentType"`            // MIME type of this version of the file
	CommitMessage string `json:"commitMessage,optional"` // Commit message for this version
}

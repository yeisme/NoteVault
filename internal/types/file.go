// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.3

package types

type BatchDeleteFilesRequest struct {
	FileIDs []string `json:"fileIds"`
}

type BatchDeleteFilesResponse struct {
	Succeeded []string `json:"succeeded"` // 成功删除的文件ID列表
	Failed    []string `json:"failed"`    // 删除失败的文件ID列表 (及原因，可选)
	Message   string   `json:"message"`
}

type FileDeleteRequest struct {
	FileID string `path:"fileId"`
}

type FileDeleteResponse struct {
	Message string `json:"message"`
}

type FileDownloadRequest struct {
	FileID    string `path:"fileId"`
	VersionID *int   `form:"versionId,omitempty"` // 可选，指定下载特定版本的文件
}

type FileUploadRequest struct {
	FileName      string `form:"fileName,omitempty"`      // 可选：如果未提供，则使用上传文件的名称
	FileType      string `form:"fileType,omitempty"`      // 可选：可以推断或指定
	Description   string `form:"description,omitempty"`   // 描述
	Tags          string `form:"tags,omitempty"`          // 逗号分隔的标签
	CommitMessage string `form:"commitMessage,omitempty"` // 版本提交信息
}

type FileUploadResponse struct {
	FileID      string `json:"fileId"`
	FileName    string `json:"fileName"`
	ContentType string `json:"contentType"`
	Size        int64  `json:"size"`
	Message     string `json:"message"`
	Version     int    `json:"version"` // 上传后的文件版本号
}

type FileVersionDiffRequest struct {
	FileID        string `path:"fileId"`
	BaseVersion   int    `form:"baseVersion"`   // 基础版本号
	TargetVersion int    `form:"targetVersion"` // 目标版本号
}

type FileVersionDiffResponse struct {
	FileID        string `json:"fileId"`
	BaseVersion   int    `json:"baseVersion"`
	TargetVersion int    `json:"targetVersion"`
	DiffContent   string `json:"diffContent"` // 差异内容 (例如 unified diff 格式)
	Message       string `json:"message,omitempty"`
}

type GetFileMetadataRequest struct {
	FileID    string `path:"fileId"`
	VersionID *int   `form:"versionId,omitempty"` // 可选，获取特定版本文件的元数据
}

type GetFileMetadataResponse struct {
	Metadata FileMetadata `json:"metadata"`
}

type GetFileVersionsRequest struct {
	FileID string `path:"fileId"`
}

type GetFileVersionsResponse struct {
	FileID   string            `json:"fileId"`
	Versions []FileVersionInfo `json:"versions"`
}

type ListFilesRequest struct {
	UserID         string `form:"userId,omitempty"`                             // 按用户ID筛选（管理员可能会使用）
	FileName       string `form:"fileName,omitempty"`                           // 按文件名模糊匹配
	FileType       string `form:"fileType,omitempty"`                           // 文件类型精确匹配
	Tag            string `form:"tag,omitempty"`                                // 按单个标签精确匹配 (未来可支持多标签)
	CreatedAtStart int64  `form:"createdAtStart,omitempty"`                     // 创建时间范围开始 (Unix timestamp)
	CreatedAtEnd   int64  `form:"createdAtEnd,omitempty"`                       // 创建时间范围结束 (Unix timestamp)
	UpdatedAtStart int64  `form:"updatedAtStart,omitempty"`                     // 更新时间范围开始 (Unix timestamp)
	UpdatedAtEnd   int64  `form:"updatedAtEnd,omitempty"`                       // 更新时间范围结束 (Unix timestamp)
	Page           int    `form:"page,default=1"`                               // 页码
	PageSize       int    `form:"pageSize,default=10"`                          // 每页大小
	SortBy         string `form:"sortBy,omitempty,options=name|date|size|type"` // 排序字段: name, date (updatedAt), size, type
	Order          string `form:"order,omitempty,options=asc|desc"`             // 排序顺序
}

type ListFilesResponse struct {
	Files      []FileMetadata `json:"files"`
	TotalCount int64          `json:"totalCount"`
	Page       int            `json:"page"`
	PageSize   int            `json:"pageSize"`
}

type RevertFileVersionRequest struct {
	FileID        string `path:"fileId"`
	Version       int    `json:"version"`                 // 要恢复到的版本号
	CommitMessage string `json:"commitMessage,omitempty"` // 恢复操作的提交信息
}

type RevertFileVersionResponse struct {
	Metadata FileMetadata `json:"metadata"` // 恢复后，文件当前的元数据（版本已更新）
	Message  string       `json:"message"`
}

type UpdateFileMetadataRequest struct {
	FileID        string   `path:"fileId"`
	FileName      string   `json:"fileName,omitempty"`
	Description   string   `json:"description,omitempty"`
	Tags          []string `json:"tags,omitempty"`
	CommitMessage string   `json:"commitMessage,omitempty"` // 版本提交信息
}

type UpdateFileMetadataResponse struct {
	Metadata FileMetadata `json:"metadata"` // 更新后的元数据，包含新的版本号
	Message  string       `json:"message"`
}

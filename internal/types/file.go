// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.3

package types

type BatchDeleteFilesRequest struct {
	FileIDs       []string `json:"fileIds"`
	VersionNumber *int     `json:"versionNumber,optional"` // Optional, specify to delete a specific version of the files
}

type BatchDeleteFilesResponse struct {
	Succeeded []string `json:"succeeded"` // List of file IDs that were successfully deleted
	Failed    []string `json:"failed"`    // List of file IDs that failed to delete (and reasons, optional)
	Message   string   `json:"message"`
}

type FileDeleteRequest struct {
	FileID        string `path:"fileId"`
	VersionNumber *int   `json:"versionNumber,optional"` // Optional, specify to delete a specific version of the file
}

type FileDeleteResponse struct {
	Message string `json:"message"`
}

type FileDownloadRequest struct {
	FileID        string `path:"fileId"`
	VersionNumber *int   `form:"versionNumber,optional"` // Optional, specify to download a specific version of the file
}

type FileUploadRequest struct {
	FileName      string `form:"fileName,optional"`      // Optional: If not provided, the name of the uploaded file will be used
	FileType      string `form:"fileType,optional"`      // Optional: Can be inferred or specified
	Description   string `form:"description,optional"`   // Description
	Tags          string `form:"tags,optional"`          // Comma-separated tags
	CommitMessage string `form:"commitMessage,optional"` // Version commit message
}

type FileUploadResponse struct {
	FileID      string `json:"fileId"`
	FileName    string `json:"fileName"`
	ContentType string `json:"contentType"`
	Size        int64  `json:"size"`
	Message     string `json:"message"`
	Version     int    `json:"version"` // File version number after upload
}

type FileVersionDiffRequest struct {
	FileID        string `path:"fileId"`
	BaseVersion   int    `form:"baseVersion"`   // Base version number
	TargetVersion int    `form:"targetVersion"` // Target version number
}

type FileVersionDiffResponse struct {
	FileID        string `json:"fileId"`
	BaseVersion   int    `json:"baseVersion"`
	TargetVersion int    `json:"targetVersion"`
	DiffContent   string `json:"diffContent"` // Difference content (e.g., unified diff format)
	Message       string `json:"message,optional"`
}

type GetFileMetadataRequest struct {
	FileID        string `path:"fileId"`
	VersionNumber *int   `form:"versionNumber,optional"` // Optional, get metadata for a specific version of the file
}

type GetFileMetadataResponse struct {
	Metadata FileMetadata `json:"metadata"`
}

type GetFileVersionsRequest struct {
	FileID string `path:"fileId"`
}

type GetFileVersionsResponse struct {
	FileID   string            `json:"fileId"`
	Versions []FileVersionInfo `json:"versions"`
}

type ListFilesRequest struct {
	UserID         string `form:"userId,optional"`                             // Filter by user ID (may be used by administrators)
	FileName       string `form:"fileName,optional"`                           // Fuzzy match by file name
	FileType       string `form:"fileType,optional"`                           // Exact match by file type
	Tag            string `form:"tag,optional"`                                // Exact match by a single tag (multiple tags may be supported in the future)
	CreatedAtStart int64  `form:"createdAtStart,optional"`                     // Creation time range start (Unix timestamp)
	CreatedAtEnd   int64  `form:"createdAtEnd,optional"`                       // Creation time range end (Unix timestamp)
	UpdatedAtStart int64  `form:"updatedAtStart,optional"`                     // Update time range start (Unix timestamp)
	UpdatedAtEnd   int64  `form:"updatedAtEnd,optional"`                       // Update time range end (Unix timestamp)
	Page           int    `form:"page,default=1"`                              // Page number
	PageSize       int    `form:"pageSize,default=10"`                         // Page size
	SortBy         string `form:"sortBy,optional,options=name|date|size|type"` // Sort field: name, date (updatedAt), size, type
	Order          string `form:"order,optional,options=asc|desc"`             // Sort order
}

type ListFilesResponse struct {
	Files      []FileMetadata `json:"files"`
	TotalCount int64          `json:"totalCount"`
	Page       int            `json:"page"`
	PageSize   int            `json:"pageSize"`
}

type RevertFileVersionRequest struct {
	FileID        string `path:"fileId"`
	Version       int    `json:"version"`                // Version number to revert to
	CommitMessage string `json:"commitMessage,optional"` // Commit message for the revert operation
}

type RevertFileVersionResponse struct {
	Metadata FileMetadata `json:"metadata"` // Current file metadata after reverting (version is updated)
	Message  string       `json:"message"`
}

type UpdateFileMetadataRequest struct {
	FileID        string   `path:"fileId"`
	FileName      string   `json:"fileName,optional"`
	Description   string   `json:"description,optional"`
	Tags          []string `json:"tags,optional"`
	CommitMessage string   `json:"commitMessage,optional"` // Version commit message
}

type UpdateFileMetadataResponse struct {
	Metadata FileMetadata `json:"metadata"` // Updated metadata, including the new version number
	Message  string       `json:"message"`
}
